from functools import reduce

def isPrime(n):
    for i in range(2, int(n**0.5) +1 ):
        if n % i == 0:
            return False
    return True

def multiOf3And5():
	Sum = 0
	for num in range(1000):
		if num % 3 == 0 or num % 5 == 0:
			Sum += num
	return Sum

print(multiOf3And5())

def evenFibSeq():
	Sum = 2
	a = 1
	b = 2
	while a + b < 4000000:
		c = a + b
		if c % 2 == 0:
			Sum += c
		a = b
		b = c
	return Sum

print(evenFibSeq())

def LargestPrimeFactor(n):
	i = 2
	while i * i < n:
		while n % i == 0:
			n = n / i
		i = i + 1
	return n

print(LargestPrimeFactor(600851475143))

def LargestPalindromeProduct():
	largest = 0
	for a in range(1000):
		for b in range(1000):
			x = a * b
			if str(x)[::-1] == str(x):
				if x > largest:
					largest = x
	return largest
print(LargestPalindromeProduct())

def SmallestMultiple():
	multiple = 1
	for i in range(2, 21):
		if isPrime(i):
			for n in range(1, 6):
				if i**n > 20:
					print(n-1)
					multiple = multiple * i**(n-1)
					break
	return multiple

print(SmallestMultiple())

def SumSquareDifference():
	Sum = 0
	for num in range(1, 101):
		Sum += num * num
	Square = 0
	for num in range(1, 101):
		Square += num
	return Square * Square - Sum

print(SumSquareDifference())

def Prime10001():
	counter = 1
	idx = 3
	while counter <= 10001:
		if isPrime(idx):
			counter += 1
			idx += 2
		else:
			idx += 2
	return idx

print(Prime10001())

def LargestProductInSeries(n, s):
	Finalproduct = 0
	for i in range(0, len(n)-s):
			numrange = n[i:i+s]
			numrange = list(numrange)
			numrange = map(int,numrange)
			product = reduce(lambda x,y:x*y, numrange)
			if product > Finalproduct:
				Finalproduct = product
	return Finalproduct

print(LargestProductInSeries(SuperLongNumber, 13))#number omitted 

def SpecialPythTriplet():
	for a in range (1, 1000):
		for b in range (1, 1000):
			c = 1000 - a - b
			if c*c == a*a + b*b:
				return a*b*c

print(SpecialPythTriplet())

def SumOfPrimes():
	primes = []
	for x in range(2, 2000001):
		for p in primes:
			if x % p == 0:
				break
			if x < p*p:
				primes.append(x)
				break
		else: primes.append(x)
	return sum(primes)


print(SumOfPrimes())
